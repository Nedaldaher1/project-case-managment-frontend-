interface SessionDataEntry<T> {
    value: T;
    flash: boolean;
}
export interface SessionData<T = any> {
    _data: Record<string, SessionDataEntry<T>>;
    _expire: string | null;
    _delete: boolean;
    _accessed: string | null;
}
export declare class Session<T = any> {
    private cache;
    constructor();
    setCache(cache_data: SessionData<T>): void;
    getCache(): SessionData<T>;
    setExpiration(expiration: string): void;
    reupSession(expiration: number | null | undefined): void;
    deleteSession(): void;
    sessionValid(): boolean;
    updateAccess(): void;
    get<K extends keyof T>(key: K): T[K] | null;
    set<K extends keyof T>(key: K, value: T[K]): void;
    flash<K extends keyof T>(key: K, value: T[K]): void;
}
export {};
//# sourceMappingURL=Session.d.ts.map